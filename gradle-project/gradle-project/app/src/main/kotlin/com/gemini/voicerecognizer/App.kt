/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.gemini.voicerecognizer

class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
}

fun main() {
    println(App().greeting)
    println("Jose Luis Hurtado Balcazar")
    val pi=3.1416
    var dinero=10
    val nombre="Jose"
    val boolean=true
    val numeroLargo = 3L
    val double = 2.7182
    val p1=1
    val p2=2
    val p3=p1-p2
    println(p3)
    println("Uso de $: $dinero")
    if (nombre.isNotEmpty()){
        println("Nombre tiene una longitud de ${nombre.length}.")
    }else if(nombre.isEmpty()){
        println("OK!")    
    }else{
        println("Error.")
    }
    
    when (nombre){
        "Jose"->println("Luis")
        "Luis"->println("Migul")
    }

    val code=200
    when (code){
        in 200..299->println("ok")
        in 400..500->println("Not ok")
        else->println("Bad")
    }

    var contador=10
    while (contador>0){
        println("El valor de contador es $contador")
        contador--
    }

    do{
        println("Generando número aleatorio: ")    
        var numeroaleatorio=(0..100).random()   
        println("$numeroaleatorio")
        numeroaleatorio--
    }while (numeroaleatorio>50)

    val lista_frutas=listOf("manzana","pera","frambuesa","durazno")
    for (fruta in lista_frutas){
        println("Hoy comeré $fruta")
    }

    val lista_frutas2=listOf("manzana","pera","frambuesa","durazno")
    for (fruta2 in lista_frutas2){
        println("Hoy comeré $fruta2")
        lista_frutas2.forEach{fruta2->println("Hoy comeré nueva $fruta2")}
    }

    val caracteres_frutas=lista_frutas2.map{fruta2->fruta2.length}
    println(caracteres_frutas)

    val lista_filtrada=caracteres_frutas.filter{caracteres_frutas->caracteres_frutas>5}
    println(lista_filtrada)

    println("!!: double bang.")

    var nombre2 : String?=null
    /*println(nombre?.length)
    */

    try{
        nombre!!.length
    }catch(excepcion:NullPointerException){
        println("Ha ocurrido un error")
    }finally{
        println("Fialmente ha ocurrido un eroror... Cerrando aplicación")
    }


    try{
        throw NullPointerException("Referencia nula")
    }catch(excepcion:NullPointerException){
        println("Ha ocurrido un error")
    }finally{
        println("Fialmente ha ocurrido un eroror... Cerrando aplicación")
    }

    val val1=10
    val val2=0
    val resultado : Int=try{val1/val2} catch (exception:Exception){0}
    println(resultado)

    var nombre3: String?=null
    val caracteres_nombre:Int=nombre3?.length ?:0
    println(caracteres_nombre)

}
